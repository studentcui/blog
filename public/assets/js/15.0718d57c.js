(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{578:function(s,n,a){"use strict";a.r(n);var i=a(13),t=Object(i.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("[TOC]")]),s._v(" "),a("h1",{attrs:{id:"_1-字符串处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-字符串处理"}},[s._v("#")]),s._v(" 1 字符串处理")]),s._v(" "),a("h2",{attrs:{id:"_1-1-kmp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-kmp"}},[s._v("#")]),s._v(" 1.1 KMP")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/*\n *Next[]含义：x[i-Next[i]...i-1]=x[0...Next[i]-1]\n *Next[i]为满足x[i-z...i-1]=x[0...z-1]的最大z值（就是x的自身匹配）\n */\nvoid getNext(char x[], int m, int Next[]){\n    int i, j;\n    j = Next[0] = -1;\n    i = 0;\n    while(i<m){\n        while(-1 != j && x[i] != x[j]) j = Next[j];\n        if(x[++i] == x[++j]) Next[i] = Next[j];\n        else Next[i] = j;\n    }\n}\n/*\n *返回x在y中出现的次数，可以重叠\n */\nint Next[10010];\nint kmp(char x[], int m, char y[], int n){ //x模式串y主串\n    int i, j;\n    int ans = 0;\n    getNext(x,m,Next);\n    i = j = 0;\n    while(i < n){\n        while(-1 != j && y[i] != x[j]) j = Next[j];\n        i++;j++;\n        if(j >= m){\n            ans++;\n            j = Next[j];\n        }\n    }\n    return ans;\n} \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("h2",{attrs:{id:"_1-2-扩展kmp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-扩展kmp"}},[s._v("#")]),s._v(" 1.2 扩展KMP")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//Next[i]:x[i...m-1] 与x[0...m-1] 的最长公共前缀\n//extend[i]:y[i...n-1] 与x[0...m-1] 的最长公共前缀\nvoid preEKMP(char x[],int m,int Next[]) {\n    Next[0] = m;\n    int j = 0;\n    while( j+1 < m && x[j] == x[j+1] )\n        j++;\n    Next[1] = j;\n    int k = 1;\n    for(int i = 2; i < m; i++) {\n        int p = Next[k]+k−1;\n        int L = Next[i−k];\n        if( i+L < p+1 )\n            Next[i] = L;\n        else {\n            j = max(0,p−i+1);\n            while( i+j < m && x[i+j] == x[j])\n                j++;\n            Next[i] = j;\n            k = i;\n        }\n    }\n}\nvoid EKMP(char x[],int m,char y[],int n,int Next[],int extend[]) {\n    pre_EKMP(x,m,Next);\n    int j = 0;\n    while(j < n && j < m && x[j] == y[j])\n        j++;\n    extend[0] = j;\n    int k = 0;\n    for(int i = 1; i < n; i++) {\n        int p = extend[k]+k−1;\n        int L = Next[i−k];\n        if(i+L < p+1)\n            extend[i] = L;\n        else {\n            j = max(0,p−i+1);\n            while( i+j < n && j < m && y[i+j] == x[j] )\n                j++;\n            extend[i] = j;\n            k = i;\n        }\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br")])]),a("h1",{attrs:{id:"_2-数学"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数学"}},[s._v("#")]),s._v(" 2 数学")]),s._v(" "),a("h2",{attrs:{id:"_2-1-素数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-素数"}},[s._v("#")]),s._v(" 2.1 素数")]),s._v(" "),a("h3",{attrs:{id:"_2-1-1-素数筛选-判断-maxn的数是否素数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-素数筛选-判断-maxn的数是否素数"}},[s._v("#")]),s._v(" 2.1.1 素数筛选（判断<MAXN的数是否素数）")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/*\n* 素数筛选，判断小于MAXN 的数是不是素数。\n* notprime 是一张表，为false 表示是素数，true 表示不是素数\n*/\nconst int MAXN=1000010;\nbool notprime[MAXN];//值为false 表示素数，值为true 表示非素数\nvoid init() {\n    memset(notprime,false,sizeof(notprime));\n    notprime[0]=notprime[1]=true;\n    for(int i=2; i<MAXN; i++)\n        if(!notprime[i]) {\n            if(i>MAXN/i)\n                continue;//防止后面i*i 溢出(或者i,j 用long long)\n            //直接从i*i 开始就可以，小于i 倍的已经筛选过了, 注意是j+=i\n            for(int j=i*i; j<MAXN; j+=i)\n                notprime[j]=true;\n        }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h3",{attrs:{id:"_2-1-2-素数筛选-筛选出-maxn的素数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-素数筛选-筛选出-maxn的素数"}},[s._v("#")]),s._v(" 2.1.2 素数筛选（筛选出<=MAXN的素数）")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/*\n* 素数筛选，存在小于等于MAXN 的素数\n* prime[0] 存的是素数的个数\n*/\nconst int MAXN=10000;\nint prime[MAXN+1];\nvoid getPrime() {\n    memset(prime,0,sizeof(prime));\n    for(int i=2; i<=MAXN; i++) {\n        if(!prime[i])\n            prime[++prime[0]]=i;\n        for(int j=1; j<=prime[0]&&prime[j]<=MAXN/i; j++) {\n            prime[prime[j]*i]=1;\n            if(i%prime[j]==0)\n                break;\n        }\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h2",{attrs:{id:"_2-2-幂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-幂"}},[s._v("#")]),s._v(" 2.2 幂")]),s._v(" "),a("h3",{attrs:{id:"_2-2-1-快速幂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-快速幂"}},[s._v("#")]),s._v(" 2.2.1 快速幂")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("typedef long long ll;\nll mod;\nll ksm(ll a, ll n) { //计算a^n % mod\n    ll re = 1;\n    while(n) {\n        if(n & 1)//判断n的最后一位是否为1\n            re = (re * a) % mod;\n        n >>= 1;//舍去n的最后一位\n        a = (a * a) % mod;//将a平方\n    }\n    return re % mod;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"_2-2-2-矩阵快速幂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-矩阵快速幂"}},[s._v("#")]),s._v(" 2.2.2 矩阵快速幂")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("typedef long long Type;\nconst int MAXM = 10, mod = 10; //MAXM方阵边长 mod取模\nstruct Matrix {\n    Type a[MAXM][MAXM] ;\n    Type* operator [] (const int id) const {\n        return (Type*)(a[id]);\n    }\n    Matrix(bool op = false) {\n        for(int i = 0; i < MAXM; i++)\n            for(int j = 0; j < MAXM; j++)\n                a[i][j] = op * ( i == j ) ;\n    }\n    Matrix operator * (const Matrix A) const {\n        Matrix ans ;\n        for ( int i = 0; i < MAXM; i++)\n            for ( int j = 0; j < MAXM; j++)\n                for ( int k = 0; k < MAXM; k++)\n                    ans[i][j] = (ans[i][j] + a[i][k] * A[k][j]) % mod;\n        return ans;\n    }\n    Matrix operator ^ (int mi) const {\n        Matrix ans(true), A = (*this);\n        while (mi) {\n            if (mi & 1)\n                ans = ans * A;\n            A = A * A;\n            mi >>= 1;\n        }\n        return ans;\n    }\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("h1",{attrs:{id:"_3-其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-其他"}},[s._v("#")]),s._v(" 3 其他")]),s._v(" "),a("h2",{attrs:{id:"_3-1-stl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-stl"}},[s._v("#")]),s._v(" 3.1 STL")]),s._v(" "),a("h3",{attrs:{id:"_3-1-1-priority-queue优先队列-堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-priority-queue优先队列-堆"}},[s._v("#")]),s._v(" 3.1.1 priority_queue优先队列（堆）")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include<queue>\n//方法一\npriority_queue<int> q;   　　　　　　　　　　　　  //通过操作，按照元素从大到小的顺序出队\npriority_queue<int,vector<int>, greater<int> > q;  　　//通过操作，按照元素从小到大的顺序出队\n//方法二\nstruct cmp {\n    operator bool()(int x, int y) {\n        return x > y; //小的优先级高 因为优先出列判定为!cmp 所以反向定义实现小值优先\n    }\n};\npriority_queue<int, vector<int>, cmp> q;\n//方法三\nstruct node {\n    int x;\n    friend bool operator < (node a, node b) {\n        return a.x > b.x;//结构体中，x小的优先级高\n    }\n};\npriority_queue<node>q;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h2",{attrs:{id:"_3-2-排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-排序"}},[s._v("#")]),s._v(" 3.2 排序")]),s._v(" "),a("h3",{attrs:{id:"_3-2-1-归并排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-归并排序"}},[s._v("#")]),s._v(" 3.2.1 归并排序")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const int MAXN = 10;\nint a[MAXN], t[MAXN]; //a为排序的数组，t为临时数组\nvoid merge_sort(int x, int y) { //用法merge_sort(0,n)\n    if(y-x<=1)\n        return;\n    int m = x+(y-x)/2;\n    int p = x, q = m, i = x;\n    merge_sort(x,m);\n    merge_sort(m,y);\n    while(p < m || q < y) {\n        if(q >= y || (p < m && a[p] < a[q]))\n            t[i++] = a[p++];\n        else\n            t[i++] = a[q++];\n    }\n    for(int i = x; i < y; ++i)\n        a[i] = t[i];\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h1",{attrs:{id:"_4-图论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-图论"}},[s._v("#")]),s._v(" 4 图论")]),s._v(" "),a("h2",{attrs:{id:"_4-1-最短路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-最短路"}},[s._v("#")]),s._v(" 4.1 最短路")]),s._v(" "),a("h3",{attrs:{id:"_4-1-1-floyd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-floyd"}},[s._v("#")]),s._v(" 4.1.1 Floyd")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for(int k = 1; k <= n; ++k)\n    for(int i = 1; i <= n; ++i)\n        for(int j = 1; j <= n; ++j)\n            if(e[i][j] > e[i][k]+e[k][j])\n                e[i][j] = e[i][k]+e[k][j];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_4-1-2-dijkstra单源最短路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-dijkstra单源最短路"}},[s._v("#")]),s._v(" 4.1.2 Dijkstra单源最短路")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int e[MAXN][MAXN], dis[MAXN], book[MAXN], i, j, n, m, u, v, min;\nint inf = 0x3f3f3f3f;\n//初始化\nfor(i = 1; i <= n; ++i)\n    for(j = 1; j <= n; ++j)\n        e[i][j] = i==j?0:inf;\n//读入边\n//初始化dis数组，一号顶点到其余顶点的初始距离\nfor(i = 1; i <= n; ++i)\n    dis[i] = e[1][i];\n//book数组初始化\nmemset(book, 0, sizeof book);\nbook[1] = 1;\n//dijkstra核心语句\nfor(i = 1; i <= n-1; ++i){\n    min = inf;\n    for(j = 1; j <= n; ++j){\n        if(book[j] == 0 && dis[j] < min){\n            min = dis[j];\n            u = j;\n        }\n    }\n    book[u] = 1;\n    for(v = 1; v <= n; ++v)\n        if(e[u][v] < inf)\n            if(dis[v] > dis[u]+e[u][v])\n                dis[v] = dis[u]+e[u][v];\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("h3",{attrs:{id:"_4-1-3-bellman-ford-负权边"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-bellman-ford-负权边"}},[s._v("#")]),s._v(" 4.1.3 Bellman-Ford（负权边）")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('int dis[10],bak[10],i,k,n,m,u[10],v[10],w[10],check,flag;\nint inf = 0x3f3f3f3f;\n//n顶点数m边数\n//读入边\n//初始化dis\nfor(i = 1; i <= n; ++i)\n    dis[i] = inf;\ndis[1] = 0;\n//Bellman-Ford核心\nfor(k = 1; k <= n-1; ++k){\n    for(i = 1; i <= n; ++i) bak[i] = dis[i];\n    for(i = 1; i <= m; ++i)\n        if(dis[v[i]] > dis[u[i]] + w[i])\n            dis[v[i]] = dis[u[i]] + w[i];\n    check = 0;\n    for(i = 1; i <= n; ++i)\n        if(bak[i] != dis[i]){\n            check = 1;\n            break;\n        }\n    if(check == 0) break; //如果dis没更新，提前退出\n}\n//检测负权回路\nflag = 0; \nfor(i = 1; i <= m; ++i)\n    if(dis[v[i]] > dis[u[i]] + w[i]) flag = 1;\nif(flag = 1) puts("存在负权回路");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("h3",{attrs:{id:"_4-1-4-spfa-单源最短路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-4-spfa-单源最短路"}},[s._v("#")]),s._v(" 4.1.4 SPFA 单源最短路")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/*\n * 单源最短路SPFA\n * 时间复杂度0(kE)\n * 这个是队列实现，有时候改成栈实现会更加快，很容易修改\n * 这个复杂度是不定的\n */\nconst int MAXN=1010;\nconst int INF=0x3f3f3f3f;\nstruct Edge {\n    int v;\n    int cost;\n    Edge(int _v=0,int _cost=0):v(_v),cost(_cost) {}\n};\nvector<Edge>E[MAXN];\nvoid addedge(int u,int v,int w) {\n    E[u].push_back(Edge(v,w));\n}\nbool vis[MAXN];//在队列标志\nint cnt[MAXN];//每个点的入队列次数\nint dist[MAXN];\nbool SPFA(int start,int n) {\n    memset(vis,false,sizeof(vis));\n    for(int i=1; i<=n; i++)\n        dist[i]=INF;\n    vis[start]=true;\n    dist[start]=0;\n    queue<int>que;\n    while(!que.empty())\n        que.pop();\n    que.push(start);\n    memset(cnt,0,sizeof(cnt));\n    cnt[start]=1;\n    while(!que.empty()) {\n        int u=que.front();\n        que.pop();\n        vis[u]=false;\n        for(int i=0; i<E[u].size(); i++) {\n            int v=E[u][i].v;\n            if(dist[v]>dist[u]+E[u][i].cost) {\n                dist[v]=dist[u]+E[u][i].cost;\n                if(!vis[v]) {\n                    vis[v]=true;\n                    que.push(v);\n                    if(++cnt[v]>n)\n                        return false; //cnt[i] 为入队列次数，用来判定是否存在负环回路\n                }\n            }\n        }\n    }\n    return true;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br")])]),a("h2",{attrs:{id:"_4-2-最小生成树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-最小生成树"}},[s._v("#")]),s._v(" 4.2 最小生成树")]),s._v(" "),a("h3",{attrs:{id:"_4-2-1-kruskal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-kruskal"}},[s._v("#")]),s._v(" 4.2.1 Kruskal")]),s._v(" "),a("p",[s._v("边排序，两端不在同一个子树则连接，稀疏图")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const int MAXN=110;//最大点数\nconst int MAXM=10000;//最大边数\nint F[MAXN];//并查集使用\nstruct Edge {\n    int u,v,w;\n} edge[MAXM]; //存储边的信息，包括起点/终点/权值\nint tol;//边数，加边前赋值为0\nvoid addedge(int u,int v,int w) {\n    edge[tol].u=u;\n    edge[tol].v=v;\n    edge[tol++].w=w;\n}\n//排序函数，讲边按照权值从小到大排序\nbool cmp(Edge a,Edge b) {\n    return a.w<b.w;\n}\nint find(int x) {\n    if(F[x]==−1)\n        return x;\n    else\n        return F[x]=find(F[x]);\n}\n//传入点数，返回最小生成树的权值，如果不连通返回-1\nint Kruskal(int n) {\n    memset(F,−1,sizeof(F));\n    sort(edge,edge+tol,cmp);\n    int cnt=0;//计算加入的边数\n    int ans=0;\n    for(int i=0; i<tol; i++) {\n        int u=edge[i].u;\n        int v=edge[i].v;\n        int w=edge[i].w;\n        int t1=find(u);\n        int t2=find(v);\n        if(t1!=t2) {\n            ans+=w;\n            F[t1]=t2;\n            cnt++;\n        }\n        if(cnt==n−1)\n            break;\n    }\n    if(cnt<n−1)\n        return −1;//不连通\n    else\n        return ans;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br")])]),a("h3",{attrs:{id:"_4-2-2-prim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-prim"}},[s._v("#")]),s._v(" 4.2.2 Prim")]),s._v(" "),a("p",[s._v("与生成树最近的顶点加入生成树")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/*\n* Prim 求MST\n* 耗费矩阵cost[][]，标号从0 开始，0∼n-1\n* 返回最小生成树的权值，返回-1 表示原图不连通\n*/\nconst int INF=0x3f3f3f3f;\nconst int MAXN=110;\nbool vis[MAXN];\nint lowc[MAXN];\n//点是0 n-1\nint Prim(int cost[][MAXN],int n) {\n    int ans=0;\n    memset(vis,false,sizeof(vis));\n    vis[0]=true;\n    for(int i=1; i<n; i++)\n        lowc[i]=cost[0][i];\n    for(int i=1; i<n; i++) {\n        int minc=INF;\n        int p=−1;\n        for(int j=0; j<n; j++)\n            if(!vis[j]&&minc>lowc[j]) {\n                minc=lowc[j];\n                p=j;\n            }\n        if(minc==INF)\n            return −1;//原图不连通\n        ans+=minc;\n        vis[p]=true;\n        for(int j=0; j<n; j++)\n            if(!vis[j]&&lowc[j]>cost[p][j])\n                lowc[j]=cost[p][j];\n    }\n    return ans;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("h1",{attrs:{id:"_5-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-数据结构"}},[s._v("#")]),s._v(" 5 数据结构")]),s._v(" "),a("h2",{attrs:{id:"_5-1-rmq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-rmq"}},[s._v("#")]),s._v(" 5.1 RMQ")]),s._v(" "),a("h3",{attrs:{id:"_5-1-1-一维"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-1-一维"}},[s._v("#")]),s._v(" 5.1.1 一维")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//求最大值，数组下标从1 开始。\n//求最小值，或者最大最小值下标，或者数组从0 开始对应修改即可。\nconst int MAXN = 50010;\nint dp[MAXN][20];\nint mm[MAXN];\n//初始化RMQ, b 数组下标从1 开始，从0 开始简单修改\nvoid initRMQ(int n,int b[]) {\n    mm[0] = −1;\n    for(int i = 1; i <= n; i++) {\n        mm[i] = ((i&(i−1)) == 0)?mm[i−1]+1:mm[i−1];\n        dp[i][0] = b[i];\n    }\n    for(int j = 1; j <= mm[n]; j++)\n        for(int i = 1; i + (1<<j) −1 <= n; i++)\n            dp[i][j] = max(dp[i][j−1],dp[i+(1<<(j−1))][j−1]);\n}\n//查询最大值\nint rmq(int x,int y) {\n    int k = mm[y−x+1];\n    return max(dp[x][k],dp[y−(1<<k)+1][k]);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h2",{attrs:{id:"_5-2-线段树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-线段树"}},[s._v("#")]),s._v(" 5.2 线段树")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("typedef long long ll;\nunsigned ll n,m,a[MAXN],ans[MAXN<<2],tag[MAXN<<2];\ninline void push_up(ll p){\n\tans[p] = ans[p<<1] + ans[p<<1|1];\n}\nvoid build(ll p, ll l, ll r){\n    tag[p] = 0;\n    if(l == r){\n        ans[p] = a[l];\n        return;\n    }\n    ll mid = (l+r)>>1;\n    build(p<<1,l,mid);\n    build(p<<1|1,mid+1,r);\n    push_up(p);\n}\ninline void f(ll p, ll l, ll r, ll k){\n    tag[p] = tag[p]+k;\n    ans[p] = ans[p]+k*(r-l+1);\n}\ninline void push_down(ll p, ll l, ll r){\n    ll mid = (l+r)>>1;\n    f(p<<1,l,mid,tag[p]);\n    f(p<<1|1,mid+1,r,tag[p]);\n    tag[p] = 0;\n}\ninline void update(ll nl, ll nr, ll l, ll r, ll p, ll k){\n    if(nl <= l && r <= nr){\n        ans[p] += k*(r-l+1);\n        tag[p] += k;\n        return;\n    }\n    push_down(p,l,r);\n    ll mid = (l+r)>>1;\n    if(nl <= mid) update(nl, nr, l, mid, p<<1, k);\n    if(nr > mid) update(nl, nr, mid+1, r, p<<1|1, k);\n    push_up(p);\n}\nll query(ll qx, ll qy, ll l, ll r, ll p){\n\tll res = 0;\n    if(qx <= mid) res += query(qx,qy,l,mid,p<<1);\n    if(qy > mid) res += query(qx,qy,mid+1,r,p<<1|1);\n    return res;\n}\n//main{build(1,1,n)}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);