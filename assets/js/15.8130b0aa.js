(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{341:function(e,t,i){"use strict";i.r(t);var a=i(7),v=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"learn-git-branching"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#learn-git-branching"}},[e._v("#")]),e._v(" Learn Git Branching")]),e._v(" "),t("p",[e._v("链接："),t("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("learngitbranching.js.org"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"笔记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#笔记"}},[e._v("#")]),e._v(" 笔记")]),e._v(" "),t("h3",{attrs:{id:"main-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-1"}},[e._v("#")]),e._v(" main 1")]),e._v(" "),t("p",[t("code",[e._v("git branch <name>")]),e._v(" 新建<name>分支")]),e._v(" "),t("p",[t("code",[e._v("git checkout <name>")]),e._v(" <name>可以为分支、commit、文件。为分支时，切换到name分支；为commit时即Detaching HEAD，means attaching it to a commit instead of a branch；为文件时，撤销对尚未暂存文件的修改,该操作不可逆，慎用")]),e._v(" "),t("p",[t("code",[e._v("git checkout -b <name>")]),e._v(" 创建并切换到<name>分支")]),e._v(" "),t("p",[t("code",[e._v("git merge <name>")]),e._v(" 合并<name>分支到当前分支")]),e._v(" "),t("p",[t("code",[e._v("git rebase <name>")]),e._v(" 合并<name>分支到当前分支")]),e._v(" "),t("h3",{attrs:{id:"main-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-2"}},[e._v("#")]),e._v(" main 2")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Moving upwards one commit at a time with "),t("code",[e._v("^")])])]),e._v(" "),t("li",[t("p",[e._v("Moving upwards a number of times with "),t("code",[e._v("~<num>")])])])]),e._v(" "),t("p",[e._v("example:")]),e._v(" "),t("p",[t("code",[e._v("git checkout HEAD~4")])]),e._v(" "),t("p",[t("code",[e._v("git branch -f main HEAD^")]),e._v(" 将main分支置为HEAD上一个commit")]),e._v(" "),t("h3",{attrs:{id:"main-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-3"}},[e._v("#")]),e._v(" main 3")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git cherry-pick <Commit1> <Commit2> <...>")])])]),e._v(" "),t("p",[e._v("It's a very straightforward way of saying that you would like to copy a series of commits below your current location ("),t("code",[e._v("HEAD")]),e._v(")")]),e._v(" "),t("p",[e._v("Git cherry-pick is great when you know which commits you want ("),t("em",[e._v("and")]),e._v(" you know their corresponding hashes) -- it's hard to beat the simplicity it provides.")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git rebase -i HEAD~4")]),e._v(" git回退4个commit并可视化选择保留哪些commit")])]),e._v(" "),t("h3",{attrs:{id:"main-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-4"}},[e._v("#")]),e._v(" main 4")]),e._v(" "),t("p",[e._v("HEAD->bugFix")]),e._v(" "),t("p",[e._v("main is ahead of bugFix")]),e._v(" "),t("p",[t("code",[e._v("git rebase bugFix main")])]),e._v(" "),t("p",[t("code",[e._v("git rebase HEAD main")])]),e._v(" "),t("p",[e._v("HEAD->main=bugFix")]),e._v(" "),t("p",[e._v("修改最近一次commit，并覆盖")]),e._v(" "),t("p",[t("code",[e._v("git commit --amend")]),e._v("  vi编辑")]),e._v(" "),t("p",[t("code",[e._v('git commit --amend -m "修改的描述"')])]),e._v(" "),t("p",[t("code",[e._v("git tag <name> main~2")]),e._v(" 给main分支两个commit前打上name标记")]),e._v(" "),t("p",[t("code",[e._v("git describe <ref>")]),e._v("  Where "),t("code",[e._v("<ref>")]),e._v(" is anything git can resolve into a commit. If you don't specify a ref, git just uses where you're checked out right now ("),t("code",[e._v("HEAD")]),e._v(").")]),e._v(" "),t("p",[e._v("The output of the command looks like:")]),e._v(" "),t("p",[t("code",[e._v("<tag>_<numCommits>_g<hash>")])]),e._v(" "),t("p",[e._v("Where "),t("code",[e._v("tag")]),e._v(" is the closest ancestor tag in history, "),t("code",[e._v("numCommits")]),e._v(" is how many commits away that tag is, and "),t("code",[e._v("<hash>")]),e._v(" is the hash of the commit being described.")]),e._v(" "),t("h3",{attrs:{id:"remote-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remote-1"}},[e._v("#")]),e._v(" remote 1")]),e._v(" "),t("p",[t("code",[e._v("git clone")])]),e._v(" "),t("p",[t("code",[e._v("git fetch")]),e._v(" 拉取远程最新代码，但本地分支不操作")]),e._v(" "),t("p",[t("code",[e._v("git pull")]),e._v(" 是 "),t("code",[e._v("git fetch; git merge origin/main")]),e._v("的简写")]),e._v(" "),t("p",[e._v("远程和本地都有改动时：")]),e._v(" "),t("p",[t("code",[e._v("git fetch; git rabase origin/main; git push")])]),e._v(" "),t("p",[t("code",[e._v("git pull --rebase")]),e._v(" 是"),t("code",[e._v("git fetch; git rebase origin/main")]),e._v("的简写")]),e._v(" "),t("p",[t("code",[e._v("git fetch; git merge origin/main; git push")]),e._v(" 生成一条merge记录")]),e._v(" "),t("p",[e._v("rebase 和 merge的区别：")]),e._v(" "),t("p",[e._v("rebase最后是一个整洁的commit tree，但是会修改历史commit")]),e._v(" "),t("p",[e._v("merge可以保留所有提交历史")]),e._v(" "),t("p",[e._v("可按自己的偏好使用")])])}),[],!1,null,null,null);t.default=v.exports}}]);