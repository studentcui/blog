(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{341:function(a,t,i){"use strict";i.r(t);var e=i(7),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"learn-git-branching"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#learn-git-branching"}},[a._v("#")]),a._v(" Learn Git Branching")]),a._v(" "),t("p",[a._v("链接："),t("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[a._v("learngitbranching.js.org"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"笔记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#笔记"}},[a._v("#")]),a._v(" 笔记")]),a._v(" "),t("h3",{attrs:{id:"main-part-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-part-1"}},[a._v("#")]),a._v(" main part 1")]),a._v(" "),t("p",[t("code",[a._v("git branch <name>")]),a._v(" 新建<name>分支")]),a._v(" "),t("p",[t("code",[a._v("git checkout <name>")]),a._v(" <name>可以为分支、commit、文件。为分支时，切换到name分支；为commit时即Detaching HEAD，means attaching it to a commit instead of a branch；为文件时，撤销对尚未暂存文件的修改,该操作不可逆，慎用")]),a._v(" "),t("p",[t("code",[a._v("git checkout -b <name>")]),a._v(" 创建并切换到<name>分支")]),a._v(" "),t("p",[t("code",[a._v("git merge <name>")]),a._v(" 合并<name>分支到当前分支")]),a._v(" "),t("p",[t("code",[a._v("git rebase <name>")]),a._v(" 合并<name>分支到当前分支")]),a._v(" "),t("h3",{attrs:{id:"main-part-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-part-2"}},[a._v("#")]),a._v(" main part 2")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Moving upwards one commit at a time with "),t("code",[a._v("^")])])]),a._v(" "),t("li",[t("p",[a._v("Moving upwards a number of times with "),t("code",[a._v("~<num>")])])])]),a._v(" "),t("p",[a._v("example:")]),a._v(" "),t("p",[t("code",[a._v("git checkout HEAD~4")])]),a._v(" "),t("p",[t("code",[a._v("git branch -f main HEAD^")]),a._v(" 将main分支置为HEAD上一个commit")]),a._v(" "),t("h3",{attrs:{id:"main-part-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-part-3"}},[a._v("#")]),a._v(" main part 3")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("git cherry-pick <Commit1> <Commit2> <...>")])])]),a._v(" "),t("p",[a._v("It's a very straightforward way of saying that you would like to copy a series of commits below your current location ("),t("code",[a._v("HEAD")]),a._v(")")]),a._v(" "),t("p",[a._v("Git cherry-pick is great when you know which commits you want ("),t("em",[a._v("and")]),a._v(" you know their corresponding hashes) -- it's hard to beat the simplicity it provides.")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("git rebase -i HEAD~4")]),a._v(" git回退4个commit并可视化选择保留哪些commit")])]),a._v(" "),t("h3",{attrs:{id:"main-part-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-part-4"}},[a._v("#")]),a._v(" main part 4")]),a._v(" "),t("p",[a._v("HEAD->bugFix")]),a._v(" "),t("p",[a._v("main is ahead of bugFix")]),a._v(" "),t("p",[t("code",[a._v("git rebase bugFix main")])]),a._v(" "),t("p",[a._v("HEAD->main=bugFix")])])}),[],!1,null,null,null);t.default=r.exports}}]);