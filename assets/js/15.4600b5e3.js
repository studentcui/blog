(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{341:function(t,e,a){"use strict";a.r(e);var i=a(7),v=Object(i.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"learn-git-branching"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#learn-git-branching"}},[t._v("#")]),t._v(" Learn Git Branching")]),t._v(" "),e("p",[t._v("链接："),e("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("learngitbranching.js.org"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#笔记"}},[t._v("#")]),t._v(" 笔记")]),t._v(" "),e("h3",{attrs:{id:"main-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-1"}},[t._v("#")]),t._v(" main 1")]),t._v(" "),e("p",[e("code",[t._v("git branch <name>")]),t._v(" 新建<name>分支")]),t._v(" "),e("p",[e("code",[t._v("git checkout <name>")]),t._v(" <name>可以为分支、commit、文件。为分支时，切换到name分支；为commit时即Detaching HEAD，means attaching it to a commit instead of a branch；为文件时，撤销对尚未暂存文件的修改,该操作不可逆，慎用")]),t._v(" "),e("p",[e("code",[t._v("git checkout -b <name>")]),t._v(" 创建并切换到<name>分支")]),t._v(" "),e("p",[e("code",[t._v("git merge <name>")]),t._v(" 合并<name>分支到当前分支")]),t._v(" "),e("p",[e("code",[t._v("git rebase <name>")]),t._v(" 合并<name>分支到当前分支")]),t._v(" "),e("h3",{attrs:{id:"main-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-2"}},[t._v("#")]),t._v(" main 2")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Moving upwards one commit at a time with "),e("code",[t._v("^")])])]),t._v(" "),e("li",[e("p",[t._v("Moving upwards a number of times with "),e("code",[t._v("~<num>")])])])]),t._v(" "),e("p",[t._v("example:")]),t._v(" "),e("p",[e("code",[t._v("git checkout HEAD~4")])]),t._v(" "),e("p",[e("code",[t._v("git branch -f main HEAD^")]),t._v(" 将main分支置为HEAD上一个commit")]),t._v(" "),e("h3",{attrs:{id:"main-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-3"}},[t._v("#")]),t._v(" main 3")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git cherry-pick <Commit1> <Commit2> <...>")])])]),t._v(" "),e("p",[t._v("It's a very straightforward way of saying that you would like to copy a series of commits below your current location ("),e("code",[t._v("HEAD")]),t._v(")")]),t._v(" "),e("p",[t._v("Git cherry-pick is great when you know which commits you want ("),e("em",[t._v("and")]),t._v(" you know their corresponding hashes) -- it's hard to beat the simplicity it provides.")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git rebase -i HEAD~4")]),t._v(" git回退4个commit并可视化选择保留哪些commit")])]),t._v(" "),e("h3",{attrs:{id:"main-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-4"}},[t._v("#")]),t._v(" main 4")]),t._v(" "),e("p",[t._v("HEAD->bugFix")]),t._v(" "),e("p",[t._v("main is ahead of bugFix")]),t._v(" "),e("p",[e("code",[t._v("git rebase bugFix main")])]),t._v(" "),e("p",[e("code",[t._v("git rebase HEAD main")])]),t._v(" "),e("p",[t._v("HEAD->main=bugFix")]),t._v(" "),e("p",[t._v("修改最近一次commit，并覆盖")]),t._v(" "),e("p",[e("code",[t._v("git commit --amend")]),t._v("  vi编辑")]),t._v(" "),e("p",[e("code",[t._v('git commit --amend -m "修改的描述"')])]),t._v(" "),e("p",[e("code",[t._v("git tag <name> main~2")]),t._v(" 给main分支两个commit前打上name标记")]),t._v(" "),e("p",[e("code",[t._v("git describe <ref>")]),t._v("  Where "),e("code",[t._v("<ref>")]),t._v(" is anything git can resolve into a commit. If you don't specify a ref, git just uses where you're checked out right now ("),e("code",[t._v("HEAD")]),t._v(").")]),t._v(" "),e("p",[t._v("The output of the command looks like:")]),t._v(" "),e("p",[e("code",[t._v("<tag>_<numCommits>_g<hash>")])]),t._v(" "),e("p",[t._v("Where "),e("code",[t._v("tag")]),t._v(" is the closest ancestor tag in history, "),e("code",[t._v("numCommits")]),t._v(" is how many commits away that tag is, and "),e("code",[t._v("<hash>")]),t._v(" is the hash of the commit being described.")]),t._v(" "),e("h3",{attrs:{id:"remote-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remote-1"}},[t._v("#")]),t._v(" remote 1")]),t._v(" "),e("p",[e("code",[t._v("git clone")])]),t._v(" "),e("p",[e("code",[t._v("git fetch")]),t._v(" 拉取远程最新代码，但本地分支不操作")]),t._v(" "),e("p",[e("code",[t._v("git pull")]),t._v(" 是 "),e("code",[t._v("git fetch; git merge origin/main")]),t._v("的简写")]),t._v(" "),e("p",[t._v("远程和本地都有改动时：")]),t._v(" "),e("p",[e("code",[t._v("git fetch; git rabase origin/main; git push")])]),t._v(" "),e("p",[e("code",[t._v("git pull --rebase")]),t._v(" 是"),e("code",[t._v("git fetch; git rebase origin/main")]),t._v("的简写")]),t._v(" "),e("p",[e("code",[t._v("git fetch; git merge origin/main; git push")]),t._v(" 生成一条merge记录")]),t._v(" "),e("p",[t._v("rebase 和 merge的区别：")]),t._v(" "),e("p",[t._v("rebase最后是一个整洁的commit tree，但是会修改历史commit")]),t._v(" "),e("p",[t._v("merge可以保留所有提交历史")]),t._v(" "),e("p",[t._v("可按自己的偏好使用")]),t._v(" "),e("h3",{attrs:{id:"remote2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remote2"}},[t._v("#")]),t._v(" remote2")]),t._v(" "),e("p",[e("code",[t._v("git checkout -b totallyNotMain origin/main")]),t._v(" 创建新分支totallyNotMain并关联远程origin的main分支")])])}),[],!1,null,null,null);e.default=v.exports}}]);